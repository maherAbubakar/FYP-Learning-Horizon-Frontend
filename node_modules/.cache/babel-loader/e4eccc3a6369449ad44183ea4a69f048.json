{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _QuizResultFilter = _interopRequireDefault(require(\"./core-components/QuizResultFilter\"));\n\nvar _helpers = require(\"./core-components/helpers\");\n\nvar _InstantFeedback = _interopRequireDefault(require(\"./core-components/InstantFeedback\"));\n\nvar _Explanation = _interopRequireDefault(require(\"./core-components/Explanation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar Card = function Card(_ref) {\n  var questions = _ref.questions,\n      appLocale = _ref.appLocale,\n      showDefaultResult = _ref.showDefaultResult,\n      onComplete = _ref.onComplete,\n      customResultPage = _ref.customResultPage,\n      showInstantFeedback = _ref.showInstantFeedback,\n      continueTillCorrect = _ref.continueTillCorrect;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      incorrectAnswer = _useState2[0],\n      setIncorrectAnswer = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      correctAnswer = _useState4[0],\n      setCorrectAnswer = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showNextQuestionButton = _useState6[0],\n      setShowNextQuestionButton = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      endQuiz = _useState8[0],\n      setEndQuiz = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentQuestionIndex = _useState10[0],\n      setCurrentQuestionIndex = _useState10[1];\n\n  var _useState11 = (0, _react.useState)({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      buttons = _useState12[0],\n      setButtons = _useState12[1];\n\n  var _useState13 = (0, _react.useState)({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      buttonClasses = _useState14[0],\n      setButtonClasses = _useState14[1];\n\n  var _useState15 = (0, _react.useState)([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      correct = _useState16[0],\n      setCorrect = _useState16[1];\n\n  var _useState17 = (0, _react.useState)([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      incorrect = _useState18[0],\n      setIncorrect = _useState18[1];\n\n  var _useState19 = (0, _react.useState)([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      userInput = _useState20[0],\n      setUserInput = _useState20[1];\n\n  var _useState21 = (0, _react.useState)('all'),\n      _useState22 = _slicedToArray(_useState21, 2),\n      filteredValue = _useState22[0],\n      setFilteredValue = _useState22[1];\n\n  var _useState23 = (0, _react.useState)(1),\n      _useState24 = _slicedToArray(_useState23, 2),\n      userAttempt = _useState24[0],\n      setUserAttempt = _useState24[1];\n\n  var _useState25 = (0, _react.useState)(true),\n      _useState26 = _slicedToArray(_useState25, 2),\n      showDefaultResultState = _useState26[0],\n      setShowDefaultResult = _useState26[1];\n\n  var _useState27 = (0, _react.useState)(undefined),\n      _useState28 = _slicedToArray(_useState27, 2),\n      answerSelectionTypeState = _useState28[0],\n      setAnswerSelectionType = _useState28[1];\n\n  var _useState29 = (0, _react.useState)(0),\n      _useState30 = _slicedToArray(_useState29, 2),\n      totalPoints = _useState30[0],\n      setTotalPoints = _useState30[1];\n\n  var _useState31 = (0, _react.useState)(0),\n      _useState32 = _slicedToArray(_useState31, 2),\n      correctPoints = _useState32[0],\n      setCorrectPoints = _useState32[1];\n\n  var _useState33 = (0, _react.useState)(questions[currentQuestionIndex]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      question = _useState34[0],\n      setQuestion = _useState34[1];\n\n  var _useState35 = (0, _react.useState)(undefined),\n      _useState36 = _slicedToArray(_useState35, 2),\n      questionSummary = _useState36[0],\n      setQuestionSummary = _useState36[1];\n\n  (0, _react.useEffect)(function () {\n    setShowDefaultResult(showDefaultResult !== undefined ? showDefaultResult : true);\n  }, [showDefaultResult]);\n  (0, _react.useEffect)(function () {\n    setQuestion(questions[currentQuestionIndex]);\n  }, [currentQuestionIndex]);\n  (0, _react.useEffect)(function () {\n    var answerSelectionType = question.answerSelectionType; // Default single to avoid code breaking due to automatic version upgrade\n\n    setAnswerSelectionType(answerSelectionType || 'single');\n  }, [question, currentQuestionIndex]);\n  (0, _react.useEffect)(function () {\n    if (endQuiz) {\n      var totalPointsTemp = 0;\n      var correctPointsTemp = 0;\n\n      for (var i = 0; i < questions.length; i++) {\n        var point = questions[i].point || 0;\n\n        if (typeof point === 'string' || point instanceof String) {\n          point = parseInt(point);\n        }\n\n        totalPointsTemp = totalPointsTemp + point;\n\n        if (correct.includes(i)) {\n          correctPointsTemp = correctPointsTemp + point;\n        }\n      }\n\n      setTotalPoints(totalPointsTemp);\n      setCorrectPoints(correctPointsTemp);\n    }\n  }, [endQuiz]);\n  (0, _react.useEffect)(function () {\n    setQuestionSummary({\n      numberOfQuestions: questions.length,\n      numberOfCorrectAnswers: correct.length,\n      numberOfIncorrectAnswers: incorrect.length,\n      questions: questions,\n      userInput: userInput,\n      totalPoints: totalPoints,\n      correctPoints: correctPoints\n    });\n  }, [totalPoints, correctPoints]);\n  (0, _react.useEffect)(function () {\n    if (endQuiz && onComplete !== undefined && questionSummary !== undefined) {\n      onComplete(questionSummary);\n    }\n  }, [endQuiz, questionSummary]);\n  (0, _react.useEffect)(function () {\n    if (endQuiz && !showDefaultResultState && customResultPage !== undefined && questionSummary !== undefined) {\n      customResultPage(questionSummary);\n    }\n  }, [endQuiz, questionSummary]);\n\n  var nextQuestion = function nextQuestion(currentQuestionIndex) {\n    setIncorrectAnswer(false);\n    setCorrectAnswer(false);\n    setShowNextQuestionButton(false);\n    setButtons({});\n\n    if (currentQuestionIndex + 1 === questions.length) {\n      setEndQuiz(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    setFilteredValue(event.target.value);\n  };\n\n  var renderAnswerInResult = function renderAnswerInResult(question, userInputIndex) {\n    var answers = question.answers,\n        correctAnswer = question.correctAnswer,\n        questionType = question.questionType;\n    var answerSelectionType = question.answerSelectionType;\n    var answerBtnCorrectClassName;\n    var answerBtnIncorrectClassName; // Default single to avoid code breaking due to automatic version upgrade\n\n    answerSelectionType = answerSelectionType || 'single';\n    return answers.map(function (answer, index) {\n      if (answerSelectionType === 'single') {\n        // correctAnswer - is string\n        answerBtnCorrectClassName = \"\".concat(index + 1) === correctAnswer ? 'correct' : '';\n        answerBtnIncorrectClassName = \"\".concat(userInputIndex) !== correctAnswer && \"\".concat(index + 1) === \"\".concat(userInputIndex) ? 'incorrect' : '';\n      } else {\n        // correctAnswer - is array of numbers\n        answerBtnCorrectClassName = correctAnswer.includes(index + 1) ? 'correct' : '';\n        answerBtnIncorrectClassName = !correctAnswer.includes(index + 1) && userInputIndex.includes(index + 1) ? 'incorrect' : '';\n      }\n\n      return _react.default.createElement(\"div\", {\n        key: index\n      }, _react.default.createElement(\"button\", {\n        disabled: true,\n        className: \"answerBtn btn \" + answerBtnCorrectClassName + answerBtnIncorrectClassName\n      }, questionType === 'text' && _react.default.createElement(\"span\", null, answer), questionType === 'photo' && _react.default.createElement(\"img\", {\n        src: answer,\n        alt: \"image\"\n      })));\n    });\n  };\n\n  var renderQuizResultQuestions = (0, _react.useCallback)(function () {\n    var filteredQuestions;\n    var filteredUserInput;\n\n    if (filteredValue !== 'all') {\n      if (filteredValue === 'correct') {\n        filteredQuestions = questions.filter(function (question, index) {\n          return correct.indexOf(index) !== -1;\n        });\n        filteredUserInput = userInput.filter(function (input, index) {\n          return correct.indexOf(index) !== -1;\n        });\n      } else {\n        filteredQuestions = questions.filter(function (question, index) {\n          return incorrect.indexOf(index) !== -1;\n        });\n        filteredUserInput = userInput.filter(function (input, index) {\n          return incorrect.indexOf(index) !== -1;\n        });\n      }\n    }\n\n    return (filteredQuestions ? filteredQuestions : questions).map(function (question, index) {\n      var userInputIndex = filteredUserInput ? filteredUserInput[index] : userInput[index]; // Default single to avoid code breaking due to automatic version upgrade\n\n      var answerSelectionType = question.answerSelectionType || 'single';\n      return _react.default.createElement(\"div\", {\n        className: \"result-answer-wrapper\",\n        key: index + 1\n      }, _react.default.createElement(\"h3\", {\n        dangerouslySetInnerHTML: (0, _helpers.rawMarkup)(\"Q\".concat(question.questionIndex, \": \").concat(question.question))\n      }), question.questionPic && _react.default.createElement(\"img\", {\n        src: question.questionPic,\n        alt: \"image\"\n      }), renderTags(answerSelectionType, question.correctAnswer.length, question.segment), _react.default.createElement(\"div\", {\n        className: \"result-answer\"\n      }, renderAnswerInResult(question, userInputIndex)), _react.default.createElement(_Explanation.default, {\n        question: question,\n        isResultPage: true\n      }));\n    });\n  }, [endQuiz, filteredValue]);\n\n  var renderAnswers = function renderAnswers(question, buttons) {\n    var answers = question.answers,\n        correctAnswer = question.correctAnswer,\n        questionType = question.questionType;\n    var answerSelectionType = question.answerSelectionType;\n\n    var onClickAnswer = function onClickAnswer(index) {\n      return (0, _helpers.checkAnswer)(index + 1, correctAnswer, answerSelectionType, {\n        userInput: userInput,\n        userAttempt: userAttempt,\n        currentQuestionIndex: currentQuestionIndex,\n        continueTillCorrect: continueTillCorrect,\n        showNextQuestionButton: showNextQuestionButton,\n        incorrect: incorrect,\n        correct: correct,\n        setButtons: setButtons,\n        setCorrectAnswer: setCorrectAnswer,\n        setIncorrectAnswer: setIncorrectAnswer,\n        setCorrect: setCorrect,\n        setIncorrect: setIncorrect,\n        setShowNextQuestionButton: setShowNextQuestionButton,\n        setUserInput: setUserInput,\n        setUserAttempt: setUserAttempt\n      });\n    }; // Default single to avoid code breaking due to automatic version upgrade\n\n\n    answerSelectionType = answerSelectionType || 'single';\n    return answers.map(function (answer, index) {\n      return _react.default.createElement(_react.Fragment, {\n        key: index\n      }, buttons[index] !== undefined ? _react.default.createElement(\"button\", {\n        disabled: buttons[index].disabled || false,\n        className: \"\".concat(buttons[index].className, \" answerBtn btn\"),\n        onClick: function onClick() {\n          return onClickAnswer(index);\n        }\n      }, questionType === 'text' && _react.default.createElement(\"span\", null, answer), questionType === 'photo' && _react.default.createElement(\"img\", {\n        src: answer,\n        alt: \"image\"\n      })) : _react.default.createElement(\"button\", {\n        onClick: function onClick() {\n          return onClickAnswer(index);\n        },\n        className: \"answerBtn btn\"\n      }, questionType === 'text' && answer, questionType === 'photo' && _react.default.createElement(\"img\", {\n        src: answer,\n        alt: \"image\"\n      })));\n    });\n  };\n\n  var renderTags = function renderTags(answerSelectionType, numberOfSelection, segment) {\n    var singleSelectionTagText = appLocale.singleSelectionTagText,\n        multipleSelectionTagText = appLocale.multipleSelectionTagText,\n        pickNumberOfSelection = appLocale.pickNumberOfSelection;\n    return _react.default.createElement(\"div\", {\n      className: \"tag-container\"\n    }, answerSelectionType === 'single' && _react.default.createElement(\"span\", {\n      className: \"single selection-tag\"\n    }, singleSelectionTagText), answerSelectionType === 'multiple' && _react.default.createElement(\"span\", {\n      className: \"multiple selection-tag\"\n    }, multipleSelectionTagText), _react.default.createElement(\"span\", {\n      className: \"number-of-selection\"\n    }, pickNumberOfSelection.replace(\"<numberOfSelection>\", numberOfSelection)), segment && _react.default.createElement(\"span\", {\n      className: \"selection-tag segment\"\n    }, segment));\n  };\n\n  var renderResult = function renderResult() {\n    return _react.default.createElement(\"div\", {\n      className: \"card-body\"\n    }, _react.default.createElement(\"h2\", null, appLocale.resultPageHeaderText.replace(\"<correctIndexLength>\", correct.length).replace(\"<questionLength>\", questions.length)), _react.default.createElement(\"h2\", null, appLocale.resultPagePoint.replace(\"<correctPoints>\", correctPoints).replace(\"<totalPoints>\", totalPoints)), _react.default.createElement(\"br\", null), _react.default.createElement(_QuizResultFilter.default, {\n      filteredValue: filteredValue,\n      handleChange: handleChange,\n      appLocale: appLocale\n    }), renderQuizResultQuestions());\n  };\n\n  return _react.default.createElement(\"div\", {\n    className: \"questionWrapper\"\n  }, !endQuiz && _react.default.createElement(\"div\", {\n    className: \"questionWrapperBody\"\n  }, _react.default.createElement(\"div\", {\n    className: \"questionModal\"\n  }, _react.default.createElement(_InstantFeedback.default, {\n    question: question,\n    showInstantFeedback: showInstantFeedback,\n    correctAnswer: correctAnswer,\n    incorrectAnswer: incorrectAnswer\n  })), _react.default.createElement(\"div\", null, appLocale.question, \" \", currentQuestionIndex + 1, \":\"), _react.default.createElement(\"h3\", {\n    dangerouslySetInnerHTML: (0, _helpers.rawMarkup)(question && question.question)\n  }), question && question.questionPic && _react.default.createElement(\"img\", {\n    src: question.questionPic,\n    alt: \"image\"\n  }), question && renderTags(answerSelectionTypeState, question.correctAnswer.length, question.segment), question && renderAnswers(question, buttons), showNextQuestionButton && _react.default.createElement(\"div\", null, _react.default.createElement(\"button\", {\n    onClick: function onClick() {\n      return nextQuestion(currentQuestionIndex);\n    },\n    className: \"nextQuestionBtn btn\"\n  }, appLocale.nextQuestionBtn))), endQuiz && showDefaultResultState && customResultPage === undefined && renderResult());\n};\n\nCard.propTypes = {\n  questions: _propTypes.default.array,\n  showDefaultResult: _propTypes.default.bool,\n  onComplete: _propTypes.default.func,\n  customResultPage: _propTypes.default.func,\n  showInstantFeedback: _propTypes.default.bool,\n  continueTillCorrect: _propTypes.default.bool,\n  appLocale: _propTypes.default.object\n};\nvar _default = Card;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}
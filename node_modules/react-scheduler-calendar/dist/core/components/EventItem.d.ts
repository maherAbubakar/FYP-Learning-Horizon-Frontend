import React, { Component } from 'react';
import { DragElementWrapper, DragSourceOptions } from 'react-dnd';
import { SchedulerData } from 'src/core';
interface EventItemProps {
    schedulerData: SchedulerData;
    eventItem: any;
    isStart: boolean;
    isEnd: boolean;
    left: number;
    width: number;
    top: number;
    isInPopover: boolean;
    leftIndex: number;
    rightIndex: number;
    isDragging: boolean;
    connectDragSource: (...args: any[]) => any;
    connectDragPreview: (...args: any[]) => any;
    updateEventStart?: (...args: any[]) => any;
    updateEventEnd?: (...args: any[]) => any;
    moveEvent?: (...args: any[]) => any;
    subtitleGetter?: (...args: any[]) => any;
    eventItemClick?: (...args: any[]) => any;
    conflictOccurred?: (...args: any[]) => any;
    eventItemTemplateResolver?: (...args: any[]) => any;
    renderEvent?: (eventItem: any, connectDragSource: DragElementWrapper<DragSourceOptions>, renderResizer: (fragment: any) => JSX.Element) => React.ReactElement;
}
interface EventItemState {
    left: number;
    top: number;
    startX?: number;
    endX?: number;
    width: number;
    isResizing: boolean;
}
declare class EventItem extends Component<EventItemProps, EventItemState> {
    static defaultProps: Partial<EventItemProps>;
    private startResizer;
    private endResizer;
    constructor(props: Readonly<EventItemProps>);
    UNSAFE_componentWillReceiveProps(np: EventItemProps): void;
    componentDidMount(): void;
    initStartDrag: (ev: MouseEvent | TouchEvent) => void;
    doStartDrag: (ev: MouseEvent | TouchEvent) => void;
    stopStartDrag: (ev: MouseEvent | TouchEvent) => void;
    checkEventsConflict: (events: any, schedulerData: SchedulerData, slotId: string, eventItem: any, localeMoment: any, start: string, end: string, hasConflict: boolean) => boolean;
    cancelStartDrag: (ev: MouseEvent | TouchEvent) => void;
    initEndDrag: (ev: MouseEvent | TouchEvent) => void;
    doEndDrag: (ev: MouseEvent | TouchEvent) => void;
    stopEndDrag: (ev: MouseEvent | TouchEvent) => void;
    cancelEndDrag: (ev: MouseEvent | TouchEvent) => void;
    renderResizer: (fragment: React.ReactElement) => JSX.Element;
    render(): JSX.Element;
    startResizable: (props: EventItemProps) => boolean;
    endResizable: (props: EventItemProps) => boolean;
    subscribeResizeEvent: (props: EventItemProps) => void;
}
export default EventItem;

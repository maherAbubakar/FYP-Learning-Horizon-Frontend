import React from 'react';
import { SchedulerData } from 'src/core';
interface ResourceEventsProps {
    resourceEvents?: any;
    schedulerData: SchedulerData;
    dndSource?: any;
    onSetAddMoreState?: (...args: any[]) => any;
    updateEventStart?: (...args: any[]) => any;
    updateEventEnd?: (...args: any[]) => any;
    onHover?: (...args: any[]) => any;
    moveEvent?: (...args: any[]) => any;
    movingEvent?: (...args: any[]) => any;
    conflictOccurred?: (...args: any[]) => any;
    newEvent?: (...args: any[]) => any;
    eventItemClick?: (...args: any[]) => any;
    eventItemTemplateResolver?: (...args: any[]) => any;
    getHoverAreaStyle?: (...args: any[]) => any;
    connectDropTarget: (...args: any[]) => any;
    isOver?: boolean;
}
interface ResourceEventsState {
    startX?: number;
    left?: number;
    leftIndex?: number;
    width?: number;
    rightIndex?: number;
    isSelecting?: boolean;
    hover?: any;
}
declare class ResourceEvents extends React.Component<ResourceEventsProps, ResourceEventsState> {
    private eventContainer;
    private DnDEventItem;
    constructor(props: Readonly<ResourceEventsProps>);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: ResourceEventsProps): void;
    initDrag: (ev: MouseEvent | TouchEvent) => void;
    doDrag: (ev: MouseEvent | TouchEvent) => void;
    stopDrag: (ev: MouseEvent | TouchEvent) => void;
    cancelDrag: (ev: MouseEvent | TouchEvent) => void;
    render(): JSX.Element;
    onAddMoreClick: (headerItem: any) => void;
    eventContainerRef: (element: HTMLDivElement) => void;
}
export default ResourceEvents;

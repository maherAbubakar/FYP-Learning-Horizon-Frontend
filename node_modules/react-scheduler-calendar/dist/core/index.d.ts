import moment from 'moment';
import React, { Component, ReactNode } from 'react';
import { DragElementWrapper, DragSourceOptions } from 'react-dnd';
import { SchedulerData } from 'src/core/models/SchedulerData';
import DEFAULT_CONFIG from './constants/config';
import './styles/style.css';
export interface SchedulerProps {
    schedulerData: SchedulerData;
    prevClick: (...args: any[]) => any;
    nextClick: (...args: any[]) => any;
    onTodayClick: (...args: any[]) => any;
    onViewChange: (...args: any[]) => any;
    onSelectDate: (...args: any[]) => any;
    onSetAddMoreState?: (...args: any[]) => any;
    updateEventStart?: (...args: any[]) => any;
    updateEventEnd?: (...args: any[]) => any;
    moveEvent?: (...args: any[]) => any;
    movingEvent?: (...args: any[]) => any;
    leftCustomHeader?: string | ReactNode;
    rightCustomHeader?: string | ReactNode;
    newEvent?: (...args: any[]) => any;
    conflictOccurred?: (...args: any[]) => any;
    eventItemTemplateResolver?: (...args: any[]) => any;
    dndSources?: any[];
    slotClickedFunc?: (...args: any[]) => any;
    toggleExpandFunc?: (...args: any[]) => any;
    slotItemTemplateResolver?: (...args: any[]) => any;
    nonAgendaCellHeaderTemplateResolver?: (...args: any[]) => any;
    eventItemClick?: (...args: any[]) => any;
    onScrollLeft?: (...args: any[]) => any;
    onScrollRight?: (...args: any[]) => any;
    onScrollTop?: (...args: any[]) => any;
    onScrollBottom?: (...args: any[]) => any;
    renderEvent?: (eventItem: any, connectDragSource: DragElementWrapper<DragSourceOptions>, renderResizer: (fragment: React.ReactElement) => JSX.Element) => any;
    getHoverAreaStyle?: (hoverParams: any) => any;
    showBody?: boolean;
    renderResource?: (...args: any[]) => React.ReactElement;
}
interface SchedulerState {
    contentScrollbarHeight: number;
    contentScrollbarWidth: number;
    resourceScrollbarHeight: number;
    resourceScrollbarWidth: number;
    scrollLeft: number;
    scrollTop: number;
    documentWidth: number;
    documentHeight: number;
    showBody: boolean;
}
declare class Scheduler extends Component<SchedulerProps, SchedulerState> {
    private schedulerResource;
    private schedulerBoardScrollArea;
    private currentArea;
    private schedulerContent;
    private schedulerContentBgTable;
    private schedulerHead;
    private preHoverTime;
    private resourceEventsSlots;
    private hasMovedOverScheduler;
    private DndResourceEvents;
    private eventDndSource;
    constructor(props: SchedulerProps);
    static getDerivedStateFromProps(props: SchedulerProps, state: SchedulerState): {
        showBody: boolean | undefined;
    } | null;
    onWindowResize: () => void;
    scrollToSpecificTime: () => void;
    handleDraggingChanged(isDragging: boolean): void;
    handleHover(params: any): void;
    componentDidMount(): void;
    componentDidUpdate(props: SchedulerProps): void;
    render(): JSX.Element;
    resolveScrollbarSize: () => void;
    schedulerHeadRef: (element: HTMLDivElement) => void;
    onSchedulerHeadMouseOver: () => void;
    onSchedulerHeadMouseOut: () => void;
    onSchedulerHeadScroll: () => void;
    schedulerResourceRef: (element: HTMLUListElement) => void;
    schedulerBoardScrollAreaRef: (element: HTMLDivElement) => void;
    onSchedulerResourceMouseOver: () => void;
    onSchedulerResourceMouseOut: () => void;
    onSchedulerResourceScroll: () => void;
    schedulerContentRef: (element: HTMLDivElement) => void;
    schedulerContentBgTableRef: (element: HTMLTableElement) => void;
    onSchedulerContentMouseOver: () => void;
    onSchedulerContentMouseOut: () => void;
    onSchedulerContentScroll: () => void;
    onViewChange: (e: any) => void;
    goToToday: () => void;
    goNext: () => void;
    goBack: () => void;
    onSelect: (date: moment.Moment) => void;
}
export declare const DATE_FORMAT = "YYYY-MM-DD";
export declare const DATETIME_FORMAT = "YYYY-MM-DD HH:mm:ss";
export * from './constants/ViewTypes';
export * from './constants/CellUnits';
export * from './constants/SummaryPos';
export * from './models/SchedulerData';
export * from './DnDSource';
export * from './DnDContext';
export * from '../lib';
export { DEFAULT_CONFIG };
export default Scheduler;

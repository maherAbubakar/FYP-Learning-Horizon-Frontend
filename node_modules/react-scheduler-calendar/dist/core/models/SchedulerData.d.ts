import moment from 'moment';
export declare class SchedulerData {
    resources: any;
    events: any;
    eventGroups: any;
    eventGroupsAutoGenerated: any;
    viewType: number;
    cellUnit: any;
    showAgenda: boolean;
    isEventPerspective: boolean;
    resizing: any;
    scrollToSpecialMoment: any;
    documentWidth: any;
    localeMoment: any;
    config: any;
    behaviors: any;
    startDate: any;
    endDate: any;
    selectDate: any;
    renderData: any;
    headers: any;
    constructor(date?: string, viewType?: number, showAgenda?: boolean, isEventPerspective?: boolean, newConfig?: Record<string, unknown>, newBehaviors?: Record<string, unknown>, localeMoment?: typeof moment);
    findGroupIndex: (eventGroupId: any, index: number) => number;
    setLocaleMoment(localeMoment: typeof moment): void;
    setResources(resources: any[]): void;
    setEventGroupsAutoGenerated(autoGenerated: any): void;
    setEventGroups(eventGroups: any): void;
    setMinuteStep(minuteStep: number): void;
    setBesidesWidth(besidesWidth: number): void;
    getMinuteStepsInHour(): number;
    addResource(resource: any): void;
    addEventGroup(eventGroup: any): void;
    removeEventGroupById(eventGroupId: any): void;
    containsEventGroupId(eventGroupId: any): boolean;
    setEvents(events: any): void;
    setScrollToSpecialMoment(scrollToSpecialMoment: any): void;
    prev(): void;
    next(): void;
    setDate(date?: string | moment.Moment): void;
    setViewType(viewType?: number, showAgenda?: boolean, isEventPerspective?: boolean): void;
    setSchedulerMaxHeight(newSchedulerMaxHeight: any): void;
    isSchedulerResponsive(): any;
    toggleExpandStatus(slotId: any): void;
    isResourceViewResponsive(): any;
    isContentViewResponsive(): any;
    getSchedulerWidth(): any;
    getResourceTableWidth(): any;
    getContentCellWidth(): any;
    getContentTableWidth(): number;
    getScrollToSpecialMoment(): any;
    getSlots(): any;
    getSlotById(slotId: any): any;
    getResourceById(resourceId: any): undefined;
    getTableHeaderHeight(): any;
    getSchedulerContentDesiredHeight(): number;
    getCellMaxEvents(): any;
    getDateLabel(): string;
    addEvent(newEvent: any): void;
    updateEventStart(event: any, newStart: string): void;
    updateEventEnd(event: any, newEnd: string): void;
    moveEvent(event: any, newSlotId: string, newSlotName: string, newStart: string, newEnd: string): void;
    isEventInTimeWindow(eventStart: number, eventEnd: number, windowStart: number, windowEnd: number): boolean;
    removeEvent(event: any): void;
    removeEventById(eventId: any): void;
    getResourceTableConfigWidth(): any;
    getContentCellConfigWidth(): any;
    _setDocumentWidth(documentWidth: number): void;
    _detachEvent(event: any): void;
    _attachEvent(event: any): void;
    _handleRecurringEvents(): void;
    _resolveDate(num: number, date?: any): void;
    _createHeaders(): void;
    _createInitHeaderEvents(header: any): {
        time: any;
        nonWorkingTime: any;
        start: any;
        end: any;
        count: number;
        addMore: number;
        addMoreIndex: number;
        events: never[];
    };
    _createHeaderEvent(render: any, span: any, eventItem: any): {
        render: any;
        span: any;
        eventItem: any;
    };
    _getEventSlotId(event: any): any;
    _getEventGroupId(event: any): any;
    _getEventGroupName(event: any): any;
    _generateEventGroups(): void;
    _createInitRenderData(isEventPerspective: boolean, eventGroups: any[], resources: any[], headers: any[]): any[];
    getSpan(startTime: any, endTime: any, headers: any): number;
    _validateResource(resources: any[]): void;
    _validateEventGroups(eventGroups: any): void;
    _validateEvents(events: any[]): void;
    _validateMinuteStep(minuteStep: number): void;
    _compare(event1: any, event2: any): 1 | -1;
    _createRenderData(): void;
    startResizing(): void;
    _stopResizing(): void;
    _isResizing(): any;
}
